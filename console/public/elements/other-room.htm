<link rel="import" href="https://polygit.org/components/polymer/polymer-element.html" />
<link rel="import" href="https://polygit.org/components/polymer/lib/elements/dom-if.html" />
<link rel="import" href="https://polygit.org/components/polymer/lib/elements/dom-repeat.html" />
<link rel="import" href="format-to-fixed.htm" />

<dom-module id="other-room">
    <template>
        <style>@import "/css/bootstrap.min.css";</style>
        <div class="panel panel-primary small" style="width: 300px; margin-right: 10px; vertical-align: top; white-space: normal;">
            <div class="panel-heading">
                [[room.name]]
            </div>
            <div class="panel-body">
                <template is="dom-if" if="[[room.controller.reservation]]">
                    <div>
                        <b>Reservation</b> [[room.controller.reservation.username]] TTE [[room.controller.reservation.ticksToEnd]]
                    </div>
                </template>
                <template is="dom-if" if="[[room.controller.level]]">
                    <div>
                        <b>Owned</b> [[room.controller.owner.username]] RCL [[room.controller.level]]
                    </div>
                </template>
                <template is="dom-if" if="[[hasStorage]]">
                    <div>
                        <template is="dom-repeat" items="[[roomStore]]" as="resource">
                            <template is="dom-if" if="[[!index]]">
                                <b>Storage</b> [[resource.amount]] <img src$="https://s3.amazonaws.com/static.screeps.com/upload/mineral-icons/[[resource.resource]].png" /> <span class="glyphicon glyphicon-plus" on-click="toggleStorage" style="cursor: pointer;"></span>
                            </template>
                            <template is="dom-if" if="[[index]]">
                                <template is="dom-if" if="[[!hideStorage]]">
                                    <div class="storage-resources" style="margin-left: 50px;">[[resource.amount]] <img src$="https://s3.amazonaws.com/static.screeps.com/upload/mineral-icons/[[resource.resource]].png" /></div>
                                </template>
                            </template>
                        </template>
                    </div>
                </template>
                <template is="dom-if" if="[[hasTerminal]]">
                    <div>
                        <template is="dom-repeat" items="[[roomTerminal]]" as="resource">
                            <template is="dom-if" if="[[!index]]">
                                <b>Terminal</b> [[resource.amount]] <img src$="https://s3.amazonaws.com/static.screeps.com/upload/mineral-icons/[[resource.resource]].png" /> <span class="glyphicon glyphicon-plus" on-click="toggleTerminal" style="cursor: pointer;"></span>
                            </template>
                            <template is="dom-if" if="[[index]]">
                                <template is="dom-if" if="[[!hideTerminal]]">
                                    <div class="terminal-resources" style="margin-left: 50px;">[[resource.amount]] <img src$="https://s3.amazonaws.com/static.screeps.com/upload/mineral-icons/[[resource.resource]].png" /></div>
                                </template>
                            </template>
                        </template>
                    </div>
                </template>
                <template is="dom-if" if="[[room.energyCapacityAvailable]]">
                    <div style="display: flex;">
                        <div style="width: max-content; white-space: nowrap;">
                            <b>Energy</b>
                        </div>
                        <div class="progress" style="width: 100%; margin: 0 0 0 5px; break-after: always;">
                            <div class="progress-bar progress-bar-success" role="progressbar" aria-valuenow="[[room.energyAvailable]]" aria-valuemin="0" aria-valuemax="[[room.energyCapacityAvailable]]" style$="width: [[energyAvailablePercent]]%; white-space: nowrap; color: black;">
                                [[room.energyAvailable]]/[[room.energyCapacityAvailable]]
                            </div>
                        </div>
                    </div>
                </template>
                <template is="dom-if" if="[[room.towers.length]]">
                    <div style="display: flex;">
                        <div style="width: max-content; white-space: nowrap;">
                            <b>Towers</b>
                        </div>
                        <div class="progress" style="width: 100%; margin: 0 0 0 5px; break-after: always;">
                            <div class="progress-bar progress-bar-success" role="progressbar" aria-valuenow="[[towerEnergy]]" aria-valuemin="0" aria-valuemax="[[towerEnergyCapacity]]" style$="width: [[towerEnergyPercent]]%; white-space: nowrap; color: black;">
                                [[towerEnergy]]/[[towerEnergyCapacity]]
                            </div>
                        </div>
                    </div>
                </template>
                <template is="dom-if" if="[[room.labs.length]]">
                    <div style="display: flex;">
                        <div style="width: max-content; white-space: nowrap;">
                            <b>Labs</b>
                        </div>
                        <div class="progress" style="width: 100%; margin: 0 0 0 5px; break-after: always;">
                            <div class="progress-bar progress-bar-success" role="progressbar" aria-valuenow="[[labEnergy]]" aria-valuemin="0" aria-valuemax="[[labEnergyCapacity]]" style$="width: [[labEnergyPercent]]%; white-space: nowrap; color: black;">
                                [[labEnergy]]/[[labEnergyCapacity]]
                            </div>
                        </div>
                    </div>
                </template>
                <template is="dom-if" if="[[room.nukers.length]]">
                    <div style="display: flex;">
                        <div style="width: max-content; white-space: nowrap;">
                            <b>Nuker</b>
                        </div>
                        <div class="progress" style="width: 100%; margin: 0 0 0 5px; break-after: always;">
                            <div class="progress-bar progress-bar-success" role="progressbar" aria-valuenow="[[nukerEnergy]]" aria-valuemin="0" aria-valuemax="[[nukerEnergyCapacity]]" style$="width: [[nukerEnergyPercent]]%; white-space: nowrap; color: black;">
                                [[nukerEnergy]]/[[nukerEnergyCapacity]]
                            </div>
                        </div>
                        <div class="progress" style="width: 100%; margin: 0 0 0 5px; break-after: always;">
                            <div class="progress-bar progress-bar-warning" role="progressbar" aria-valuenow="[[nukerGhodium]]" aria-valuemin="0" aria-valuemax="[[nukerGhodiumCapacity]]" style$="width: [[nukerGhodiumPercent]]%; white-space: nowrap; color: black;">
                                [[nukerGhodium]]/[[nukerGhodiumCapacity]]
                            </div>
                        </div>
                    </div>
                </template>
                <template is="dom-if" if="[[room.powerSpawns.length]]">
                    <div style="display: flex;">
                        <div style="width: max-content; white-space: nowrap;">
                            <b>Power Spawn</b>
                        </div>
                        <div class="progress" style="width: 100%; margin: 0 0 0 5px; break-after: always;">
                            <div class="progress-bar progress-bar-success" role="progressbar" aria-valuenow="[[powerSpawnEnergy]]" aria-valuemin="0" aria-valuemax="[[powerSpawnEnergyCapacity]]" style$="width: [[powerSpawnEnergyPercent]]%; white-space: nowrap; color: black;">
                                [[powerSpawnEnergy]]/[[powerSpawnEnergyCapacity]]
                            </div>
                        </div>
                        <div class="progress" style="width: 100%; margin: 0 0 0 5px; break-after: always;">
                            <div class="progress-bar progress-bar-danger" role="progressbar" aria-valuenow="[[powerSpawnPower]]" aria-valuemin="0" aria-valuemax="[[powerSpawnPowerCapacity]]" style$="width: [[powerSpawnPowerPercent]]%; white-space: nowrap; color: black;">
                                [[powerSpawnPower]]/[[powerSpawnPowerCapacity]]
                            </div>
                        </div>
                    </div>
                </template>
                <template is="dom-if" if="[[room.constructionSites.length]]">
                    <div style="display: flex;">
                        <div style="width: max-content; white-space: nowrap;">
                            <b>Construction</b>
                        </div>
                        <div class="progress" style="width: 100%; margin: 0 0 0 5px; break-after: always;">
                            <div class="progress-bar progress-bar-success" role="progressbar" aria-valuenow="[[siteProgress]]" aria-valuemin="0" aria-valuemax="[[siteProgressTotal]]" style$="width: [[siteProgressPercent]]%; white-space: nowrap; color: black;">
                                [[siteProgress]]/[[siteProgressTotal]]
                            </div>
                        </div>
                    </div>
                </template>
                <template is="dom-if" if="[[room.lowestWall]]">
                    <div div="room-lowest-wall">
                        <b>Lowest Wall</b> [[room.lowestWall]]
                    </div>
                </template>
                <template is="dom-if" if="[[room.sources.length]]">
                    <template is="dom-repeat" items="[[room.sources]]" as="source">
                        <div>
                            <img src$="https://s3.amazonaws.com/static.screeps.com/upload/mineral-icons/[[source.resource]].png" />
                            [[source.amount]]<template is="dom-if" if="[[source.capacity]]">/[[source.capacity]]</template>
                            <template is="dom-if" if="[[source.ttr]]">
                                <b>TTR</b> [[source.ttr]]
                            </template>
                        </div>
                    </template>
                </template>
                <template is="dom-repeat" items="[[creeps]]" as="creep">
                    <div class="[[creepStatus(creep)]]">
                        <b>[[creep.name]]</b> [[creep.pos.x]],[[creep.pos.y]],[[creep.pos.roomName]] [[creep.hits]]/[[creep.hitsMax]] <format-to-fixed value="[[creepPercent(creep.hits, creep.hitsMax)]]"></format-to-fixed>%
                    </div>
                </template>
                <template is="dom-repeat" items="[[room.hostiles]]" as="hostile">
                    <div class="[[hostileStatus(hostile)]]">
                        <b>[[hostile.ownerUsername]]</b> [[hostile.pos.x]],[[hostile.pos.y]] [[hostile.hits]]/[[hostile.hitsMax]] <format-to-fixed value="[[creepPercent(hostile.hits, hostile.hitsMax)]]"></format-to-fixed>%
                    </div>
                </template>
            </div>
        </div>
    </template>

    <script>
        class OtherRoom extends Polymer.Element {
            static get is() {
                return "other-room";
            }

            static get properties() {
                return {
                    creeps: {
                        type: Array,
                        value: []
                    },
                    hideStorage: {
                        type: Boolean,
                        value: true
                    },
                    hideTerminal: {
                        type: Boolean,
                        value: true
                    },
                    room: {
                        type: Object,
                        value: {}
                    },
                    energyAvailablePercent: {
                        type: Number,
                        computed: "getEnergyAvailablePercent(room)"
                    },
                    hasStorage: {
                        type: Boolean,
                        computed: "getHasStorage(room)"
                    },
                    hasTerminal: {
                        type: Boolean,
                        computed: "getHasTerminal(room)"
                    },
                    labEnergy: {
                        type: Number,
                        computed: "getLabEnergy(room)"
                    },
                    labEnergyCapacity: {
                        type: Number,
                        computed: "getLabEnergyCapacity(room)"
                    },
                    labEnergyPercent: {
                        type: Number,
                        computed: "getLabEnergyPercent(labEnergy, labEnergyCapacity)"
                    },
                    nukerEnergy: {
                        type: Number,
                        computed: "getNukerEnergy(room)"
                    },
                    nukerEnergyCapacity: {
                        type: Number,
                        computed: "getNukerEnergyCapacity(room)"
                    },
                    nukerEnergyPercent: {
                        type: Number,
                        computed: "getNukerEnergyPercent(nukerEnergy, nukerEnergyCapacity)"
                    },
                    nukerGhodium: {
                        type: Number,
                        computed: "getNukerGhodium(room)"
                    },
                    nukerGhodiumCapacity: {
                        type: Number,
                        computed: "getNukerGhodiumCapacity(room)"
                    },
                    nukerGhodiumPercent: {
                        type: Number,
                        computed: "getNukerGhodiumPercent(nukerGhodium, nukerGhodiumCapacity)"
                    },
                    powerSpawnEnergy: {
                        type: Number,
                        computed: "getPowerSpawnEnergy(room)"
                    },
                    powerSpawnEnergyCapacity: {
                        type: Number,
                        computed: "getPowerSpawnEnergyCapacity(room)"
                    },
                    powerSpawnEnergyPercent: {
                        type: Number,
                        computed: "getPowerSpawnEnergyPercent(powerSpawnEnergy, powerSpawnEnergyCapacity)"
                    },
                    powerSpawnPower: {
                        type: Number,
                        computed: "getPowerSpawnPower(room)"
                    },
                    powerSpawnPowerCapacity: {
                        type: Number,
                        computed: "getPowerSpawnPowerCapacity(room)"
                    },
                    powerSpawnPowerPercent: {
                        type: Number,
                        computed: "getPowerSpawnPowerPercent(powerSpawnPower, powerSpawnPowerCapacity)"
                    },
                    roomStore: {
                        type: Array,
                        computed: "getRoomStore(room)"
                    },
                    roomTerminal: {
                        type: Array,
                        computed: "getRoomTerminal(room)"
                    },
                    siteProgress: {
                        type: Number,
                        computed: "getSiteProgress(room)"
                    },
                    siteProgressPercent: {
                        type: Number,
                        computed: "getSiteProgressPercent(siteProgress, siteProgressTotal)"
                    },
                    siteProgressTotal: {
                        type: Number,
                        computed: "getSiteProgressTotal(room)"
                    },
                    terminalStore: {
                        type: Array,
                        computed: "getTerminalStore(room)"
                    },
                    towerEnergy: {
                        type: Number,
                        computed: "getTowerEnergy(room)"
                    },
                    towerEnergyCapacity: {
                        type: Number,
                        computed: "getTowerEnergyCapacity(room)"
                    },
                    towerEnergyPercent: {
                        type: Number,
                        computed: "getTowerEnergyPercent(towerEnergy, towerEnergyCapacity)"
                    }
                };
            }

            getEnergyAvailablePercent(room) {
                return 100 * room.energyAvailable / room.energyCapacityAvailable;
            }

            getHasStorage(room) {
                return room.storage && room.storage.energy !== void 0;
            }

            getHasTerminal(room) {
                return room.terminal && room.terminal.energy !== void 0;
            }

            getLabEnergy(room) {
                return room.labs.reduce((acc, val) => acc + val.energy, 0);
            }

            getLabEnergyCapacity(room) {
                return room.labs.reduce((acc, val) => acc + val.energyCapacity, 0);
            }

            getLabEnergyPercent(labEnergy, labEnergyCapacity) {
                return 100 * labEnergy / labEnergyCapacity;
            }

            getNukerEnergy(room) {
                return room.nukers.reduce((acc, val) => acc + val.energy, 0);
            }

            getNukerEnergyCapacity(room) {
                return room.nukers.reduce((acc, val) => acc + val.energyCapacity, 0);
            }

            getNukerEnergyPercent(nukerEnergy, nukerEnergyCapacity) {
                return 100 * nukerEnergy / nukerEnergyCapacity;
            }

            getNukerGhodium(room) {
                return room.nukers.reduce((acc, val) => acc + val.ghodium, 0);
            }

            getNukerGhodiumCapacity(room) {
                return room.nukers.reduce((acc, val) => acc + val.ghodiumCapacity, 0);
            }

            getNukerGhodiumPercent(nukerGhodium, nukerGhodiumCapacity) {
                return 100 * nukerGhodium / nukerGhodiumCapacity;
            }

            getPowerSpawnEnergy(room) {
                return room.powerSpawns.reduce((acc, val) => acc + val.energy, 0);
            }

            getPowerSpawnEnergyCapacity(room) {
                return room.powerSpawns.reduce((acc, val) => acc + val.energyCapacity, 0);
            }

            getPowerSpawnEnergyPercent(powerSpawnEnergy, powerSpawnEnergyCapacity) {
                return 100 * powerSpawnEnergy / powerSpawnEnergyCapacity;
            }

            getPowerSpawnPower(room) {
                return room.powerSpawns.reduce((acc, val) => acc + val.power, 0);
            }

            getPowerSpawnPowerCapacity(room) {
                return room.powerSpawns.reduce((acc, val) => acc + val.powerCapacity, 0);
            }

            getPowerSpawnPowerPercent(powerSpawnPower, powerSpawnPowerCapacity) {
                return 100 * powerSpawnPower / powerSpawnPowerCapacity;
            }

            getRoomStore(room) {
                return Object.keys(room.storage).map((resource) => ({resource, amount: room.storage[resource]}));
            }

            getRoomTerminal(room) {
                return Object.keys(room.terminal).map((resource) => ({resource, amount: room.terminal[resource]}));
            }

            getSiteProgress(room) {
                return room.constructionSites.reduce((acc, val) => acc + val.progress, 0);
            }

            getSiteProgressPercent(siteProgress, siteProgressTotal) {
                return 100 * siteProgress / siteProgressTotal;
            }

            getSiteProgressTotal(room) {
                return room.constructionSites.reduce((acc, val) => acc + val.progressTotal, 0);
            }

            getTerminalStore(room) {
                return Object.keys(room.terminal).map((resource) => ({resource, amount: room.terminal[resource]}));
            }

            getTowerEnergy(room) {
                return room.towers.reduce((acc, val) => acc + val.energy, 0);
            }

            getTowerEnergyCapacity(room) {
                return room.towers.reduce((acc, val) => acc + val.energyCapacity, 0);
            }

            getTowerEnergyPercent(towerEnergy, towerEnergyCapacity) {
                return 100 * towerEnergy / towerEnergyCapacity;
            }

            creepPercent(hits, hitsMax) {
                return 100 * hits / hitsMax;
            }

            creepStatus(creep) {
                if (creep.hits / creep.hitsMax >= 0.8) {
                    return "text-warning";
                } else {
                    return "text-danger";
                }
            }

            hostileStatus(hostile) {
                if (hostile.ownerUsername === "Invader") {
                    return "text-warning";
                } else {
                    return "text-danger";
                }
            }

            roleStatus(count, max) {
                if (max === 0) {
                    return;
                }

                if (count === 0) {
                    return "text-danger";
                }

                if (count < max) {
                    return "text-warning";
                }
            }

            toggleStorage(ev) {
                const $target = $(ev.target);

                if ($target.hasClass("glyphicon-plus")) {
                    $target.removeClass("glyphicon-plus").addClass("glyphicon-minus");
                } else {
                    $target.removeClass("glyphicon-minus").addClass("glyphicon-plus");
                }

                this.hideStorage = !this.hideStorage;
            }

            toggleTerminal(ev) {
                const $target = $(ev.target);

                if ($target.hasClass("glyphicon-plus")) {
                    $target.removeClass("glyphicon-plus").addClass("glyphicon-minus");
                } else {
                    $target.removeClass("glyphicon-minus").addClass("glyphicon-plus");
                }

                this.hideTerminal = !this.hideTerminal;
            }
        }

        customElements.define(OtherRoom.is, OtherRoom);
    </script>
</dom-module>
