<link rel="import" href="https://polygit.org/components/polymer/polymer-element.html" />
<link rel="import" href="general-rooms.htm" />
<link rel="import" href="format-to-fixed.htm" />

<dom-module id="general-stats">
    <template>
        <style>@import "/css/bootstrap.min.css";</style>
        <div class="panel panel-default">
            <div class="panel-body">
                <div style="display: flex;">
                    <div style="width: max-content; white-space: nowrap;">
                        <b>GCL</b> [[gcl.level]]
                    </div>
                    <div class="progress" style="width: 100%; margin: 0 0 0 5px; break-after: always;">
                        <div class="progress-bar progress-bar-success" role="progressbar" aria-valuenow="[[gcl.progress]]" aria-valuemin="0" aria-valuemax="[[gcl.progressTotal]]" style$="width: [[gclPercent]]%; white-space: nowrap; color: black;">
                            <format-to-fixed value="[[gcl.progress]]"></format-to-fixed>/<format-to-fixed value="[[gcl.progressTotal]]"></format-to-fixed>
                            (<format-to-fixed value="[[gclPercent]]" digits="3"></format-to-fixed>%)
                            <format-to-fixed value="[[gclRemaining]]"></format-to-fixed> to go
                            <span id="gcl-eta"></span>
                        </div>
                    </div>
                </div>
                <div style="display: flex;">
                    <div class="progress" style="width: 200px; margin: 0; break-after: always;">
                        <div class$="progress-bar [[cpuStatus]]" role="progressbar" aria-valuenow="[[currentCpu]]" aria-valuemin="0" aria-valuemax="[[cpu.limit]]" style$="width: [[cpuPercent]]%; white-space: nowrap; color: black;">
                            <b>CPU</b> <format-to-fixed value="[[currentCpu]]" digits="2"></format-to-fixed>/[[cpu.limit]]
                        </div>
                    </div>
                    <div class="progress" style="width: 100%; margin: 0 5px; break-after: always;">
                        <div class$="progress-bar [[bucketStatus]]" role="progressbar" aria-valuenow="[[currentBucket]]" aria-valuemin="0" aria-valuemax="10000" style$="width: [[bucketPercent]]%; white-space: nowrap; color: black;">
                            <b>Bucket</b> [[currentBucket]]
                        </div>
                    </div>
                    <div style="width: max-content; white-space: nowrap;">
                        <b>Tick Limit</b> [[cpu.tickLimit]]
                    </div>
                </div>
                <div style="display: flex;">
                    <div style="width: 50%;">
                        <b>Credits</b> <format-to-fixed value="[[global.credits]]" digits="2"></format-to-fixed>
                    </div>
                    <div style="width: 50%; text-align: right;">
                        [[lastTime]]
                        <b>Tick</b> [[survey.lastPoll]]
                    </div>
                </div>
                <general-rooms rooms="[[baseRooms]]"></general-rooms>
                <b>Creeps</b> [[survey.data.creeps.length]]
            </div>
        </div>
    </template>

    <script>
        class GeneralStats extends Polymer.Element {
            static get is() {
                return "general-stats";
            }

            static get properties() {
                return {
                    cpu: {
                        type: Object,
                        value: 0
                    },
                    currentBucket: {
                        type: Number,
                        value: 0
                    },
                    currentCpu: {
                        type: Number,
                        value: 0
                    },
                    gcl: {
                        type: Object,
                        value: {}
                    },
                    global: {
                        type: Object,
                        value: {}
                    },
                    survey: {
                        type: Object,
                        value: {}
                    },
                    baseRooms: {
                        type: Array,
                        computed: "getBaseRooms(survey)"
                    },
                    bucketPercent: {
                        type: Number,
                        computed: "getBucketPercent(currentBucket)"
                    },
                    bucketStatus: {
                        type: String,
                        computed: "getBucketStatus(currentBucket)"
                    },
                    cpuPercent: {
                        type: Number,
                        computed: "getCpuPercent(currentCpu, cpu)"
                    },
                    cpuStatus: {
                        type: String,
                        computed: "getCpuStatus(currentCpu, cpu)"
                    },
                    gclPercent: {
                        type: Number,
                        computed: "getGclPercent(gcl)"
                    },
                    gclRemaining: {
                        type: Number,
                        computed: "getGclRemaining(gcl)"
                    },
                    lastTime: {
                        type: String,
                        computed: "getLastTime(survey)"
                    }
                };
            }

            getBaseRooms(survey) {
                return survey.data && survey.data.rooms ? survey.data.rooms.filter((r) => r.type === "base") : [];
            }

            getBucketPercent(currentBucket) {
                return currentBucket / 100;
            }

            getBucketStatus(currentBucket) {
                return currentBucket > 9990 ? "progress-bar-info" : currentBucket > 9000 ? "progress-bar-success" : currentBucket > 5000 ? "progress-bar-warning" : "progress-bar-danger";
            }

            getCpuPercent(currentCpu, cpu) {
                return Math.min(100 * currentCpu / cpu.limit, 100);
            }
            
            getCpuStatus(currentCpu, cpu) {
                return currentCpu < cpu.limit ? "progress-bar-success" : "progress-bar-danger"                
            }

            getGclPercent(gcl) {
                return gcl.progressTotal ? 100 * gcl.progress / gcl.progressTotal : 0;
            }

            getGclRemaining(gcl) {
                return gcl.progressTotal - gcl.progress;
            }

            getLastTime(survey) {
                return moment(survey.lastTime).format("M/D/YYYY h:mm:ss a");
            }
        }

        customElements.define(GeneralStats.is, GeneralStats);
    </script>
</dom-module>
